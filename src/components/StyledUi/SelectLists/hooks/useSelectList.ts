import { useState } from 'react';
import {
  SelectListGroupItemProps,
  SelectListDataItemProps,
  generateSelectListItems
} from '../js/selectListHelpers';

/**************************************************************************
/* This is a custom hook useSelectList that returns
/* aray - the select list selected object and the handler. */
/* example const [ selected, handleSelectList] = useSelectList(data, [groupKey], [idKey])
/*
/* selected is an object that contains selected items from
/*  a list. The object is structured in a way that groups
/*  items by a common key and has an inner object that
/*  represents each item and whether it's selected or not. 
/*
/* handle is a function that takes a type, groupKey, and
/*  itemKey as arguments. It handles the selection/deselection
/*  of items and groups based on the type provided. */
/*
/* ---------------------------------------------------------------------
/*
/* This hook uses useState to initialize the selected state
/*  to an object generated by the generateSelectListItems function.
/*  This function takes an array of data and two keys (groupKey
/*  and itemKey) to group the data by the groupKey and select
/*  each item with the itemKey.
/*
/* The toggleItem function takes a groupKey and itemKey and
/*  toggles the selection of the item with that key in the selected
/*  state. The hasAllSelected function checks whether all items
/*  are selected, either across all groups or for a specific
/*  group (groupId). The selectNone function deselects all items. 
/*
/* The toggleGroup function toggles the selection of all items
/*  in a group (groupId). Finally, the handle function is a switch
/*  statement that takes a type argument and handles the selection/deselection
/*  of items and groups based on the type provided. 
/*
/* Overall, this hook provides a simple way to manage the selection
/*  state of a list of items grouped by a common key. 
/*
/* The return selected object looks something like this:
/* selected = {
/*  chicken: {
/*    fried: true,
/*    baked: true,
/*    raw: false
/*  }, 
/*  fish: {
/*    fried: false,
/*    baked: true,
/*    raw: true
/*  }
/* }
/*
**************************************************************************/
export type UseSelectListReturnProps = [
  SelectListGroupItemProps,
  (type: string, groupKey?: string, itemKey?: string) => void
];

export const useSelectList = (
  data: SelectListDataItemProps[],
  groupKey: string,
  itemKey: string
): UseSelectListReturnProps => {
  const items = generateSelectListItems(data, groupKey, itemKey);

  const [selected, setSelected] = useState<SelectListGroupItemProps>(items);

  const toggleItem = (groupKey: string, itemKey: string) => {
    const newSel = JSON.parse(JSON.stringify(selected));
    newSel[groupKey][itemKey] = !newSel[groupKey][itemKey];
    return setSelected(newSel);
  };

  const hasAllSelected = (groupId?: string) => {
    let has = true;
    const obj = groupId ? selected[groupId] : selected;
    Object.values(obj).map((group) =>
      Object.values(group).map((val) => (!val ? (has = false) : false))
    );
    return has;
  };

  const selectNone = () =>
    Object.entries(selected).reduce((acc: SelectListGroupItemProps, [groupId, group]) => {
      if (!acc[groupId]) acc = { ...acc, [groupId]: {} };
      Object.keys(group).map((itemId) => (acc[groupId] = { ...acc[groupId], [itemId]: false }));
      return acc;
    }, {});

  const toggleGroup = (groupId: string, selectAll?: boolean) => {
    const newSelect = { ...selected };
    Object.keys(selected[groupId]).map(
      (itemId) => (newSelect[groupId][itemId] = selectAll ? true : false)
    );
    return setSelected(newSelect);
  };

  const handle = (type: string, groupId?: string, itemKey?: string) => {
    switch (type) {
      case 'toggleItem': {
        const all = hasAllSelected();

        if (all) {
          const newItems = selectNone();
          newItems[`${groupId}`][`${itemKey}`] = true;
          return setSelected(newItems);
        } else return toggleItem(`${groupId}`, `${itemKey}`); // thanks typescript
      }

      case 'toggleGroup': {
        if (!groupId) return false;

        const allIn = hasAllSelected();

        if (allIn) {
          const newItems = selectNone();
          Object.keys(newItems[groupId]).map((id) => (newItems[groupId][id] = true));
          return setSelected(newItems);
        } else return toggleGroup(groupId, true);
      }

      case 'selectGroupAll': {
        return !groupId ? false : toggleGroup(groupId, true);
      }

      case 'selectGroupNone':
        return !groupId ? false : toggleGroup(groupId, false);
    }
  };

  return [selected, handle];
};
